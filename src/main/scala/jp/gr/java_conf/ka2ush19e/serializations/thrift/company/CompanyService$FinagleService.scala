/**
 * Generated by Scrooge
 *   version: 3.19.0
 *   rev: a470ba0b90af37c6dfc4b19c5258652a8e7f706e
 *   built at: 20150625-095056
 */
package jp.gr.java_conf.ka2ush19e.serializations.thrift.company

import com.twitter.finagle.{Service => FinagleService, Thrift}
import com.twitter.finagle.stats.{NullStatsReceiver, StatsReceiver}
import com.twitter.scrooge.{ThriftStruct, TReusableMemoryTransport}
import com.twitter.util.Future
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryInputTransport
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, HashMap => mutable$HashMap}
import scala.collection.{Map, Set}

import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
class CompanyService$FinagleService(
  iface: CompanyService[Future],
  protocolFactory: TProtocolFactory,
  stats: StatsReceiver,
  maxThriftBufferSize: Int
) extends FinagleService[Array[Byte], Array[Byte]] {
  import CompanyService._

  def this(
    iface: CompanyService[Future],
    protocolFactory: TProtocolFactory
  ) = this(iface, protocolFactory, NullStatsReceiver, Thrift.maxThriftBufferSize)


  private[this] val tlReusableBuffer = new ThreadLocal[TReusableMemoryTransport] {
    override def initialValue() = TReusableMemoryTransport(512)
  }

  private[this] def reusableBuffer: TReusableMemoryTransport = {
    val buf = tlReusableBuffer.get()
    buf.reset()
    buf
  }

  private[this] val resetCounter = stats.scope("buffer").counter("resetCount")

  private[this] def resetBuffer(trans: TReusableMemoryTransport): Unit = {
    if (trans.currentCapacity > maxThriftBufferSize) {
      resetCounter.incr()
      tlReusableBuffer.remove()
    }
  }

  protected val functionMap = new mutable$HashMap[String, (TProtocol, Int) => Future[Array[Byte]]]()

  protected def addFunction(name: String, f: (TProtocol, Int) => Future[Array[Byte]]) {
    functionMap(name) = f
  }

  protected def exception(name: String, seqid: Int, code: Int, message: String): Future[Array[Byte]] = {
    try {
      val x = new TApplicationException(code, message)
      val memoryBuffer = reusableBuffer
      try {
        val oprot = protocolFactory.getProtocol(memoryBuffer)

        oprot.writeMessageBegin(new TMessage(name, TMessageType.EXCEPTION, seqid))
        x.write(oprot)
        oprot.writeMessageEnd()
        oprot.getTransport().flush()
        Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()))
      } finally {
        resetBuffer(memoryBuffer)
      }
    } catch {
      case e: Exception => Future.exception(e)
    }
  }

  protected def reply(name: String, seqid: Int, result: ThriftStruct): Future[Array[Byte]] = {
    try {
      val memoryBuffer = reusableBuffer
      try {
        val oprot = protocolFactory.getProtocol(memoryBuffer)

        oprot.writeMessageBegin(new TMessage(name, TMessageType.REPLY, seqid))
        result.write(oprot)
        oprot.writeMessageEnd()

        Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()))
      } finally {
        resetBuffer(memoryBuffer)
      }
    } catch {
      case e: Exception => Future.exception(e)
    }
  }

  final def apply(request: Array[Byte]): Future[Array[Byte]] = {
    val inputTransport = new TMemoryInputTransport(request)
    val iprot = protocolFactory.getProtocol(inputTransport)

    try {
      val msg = iprot.readMessageBegin()
      val func = functionMap.get(msg.name)
      func match {
        case _root_.scala.Some(fn) =>
          fn(iprot, msg.seqid)
        case _ =>
          TProtocolUtil.skip(iprot, TType.STRUCT)
          exception(msg.name, msg.seqid, TApplicationException.UNKNOWN_METHOD,
            "Invalid method name: '" + msg.name + "'")
      }
    } catch {
      case e: Exception => Future.exception(e)
    }
  }

  // ---- end boilerplate.

  addFunction("get", { (iprot: TProtocol, seqid: Int) =>
    try {
      val args = get$args.decode(iprot)
      iprot.readMessageEnd()
      (try {
        iface.get()
      } catch {
        case e: Exception => Future.exception(e)
      }) flatMap { value: Company =>
        reply("get", seqid, get$result(success = Some(value)))
      } rescue {
        case e => Future.exception(e)
      }
    } catch {
      case e: TProtocolException => {
        iprot.readMessageEnd()
        exception("get", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage)
      }
      case e: Exception => Future.exception(e)
    }
  })
  addFunction("getEmployees", { (iprot: TProtocol, seqid: Int) =>
    try {
      val args = getEmployees$args.decode(iprot)
      iprot.readMessageEnd()
      (try {
        iface.getEmployees()
      } catch {
        case e: Exception => Future.exception(e)
      }) flatMap { value: Seq[Employee] =>
        reply("getEmployees", seqid, getEmployees$result(success = Some(value)))
      } rescue {
        case e => Future.exception(e)
      }
    } catch {
      case e: TProtocolException => {
        iprot.readMessageEnd()
        exception("getEmployees", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage)
      }
      case e: Exception => Future.exception(e)
    }
  })
  addFunction("findEmployeeByName", { (iprot: TProtocol, seqid: Int) =>
    try {
      val args = findEmployeeByName$args.decode(iprot)
      iprot.readMessageEnd()
      (try {
        iface.findEmployeeByName(args.name)
      } catch {
        case e: Exception => Future.exception(e)
      }) flatMap { value: Employee =>
        reply("findEmployeeByName", seqid, findEmployeeByName$result(success = Some(value)))
      } rescue {
        case e: EmployeeNotFound => {
          reply("findEmployeeByName", seqid, findEmployeeByName$result(ex = _root_.scala.Some(e)))
        }
        case e => Future.exception(e)
      }
    } catch {
      case e: TProtocolException => {
        iprot.readMessageEnd()
        exception("findEmployeeByName", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage)
      }
      case e: Exception => Future.exception(e)
    }
  })
  addFunction("findEmployeeByJob", { (iprot: TProtocol, seqid: Int) =>
    try {
      val args = findEmployeeByJob$args.decode(iprot)
      iprot.readMessageEnd()
      (try {
        iface.findEmployeeByJob(args.job)
      } catch {
        case e: Exception => Future.exception(e)
      }) flatMap { value: Employee =>
        reply("findEmployeeByJob", seqid, findEmployeeByJob$result(success = Some(value)))
      } rescue {
        case e: EmployeeNotFound => {
          reply("findEmployeeByJob", seqid, findEmployeeByJob$result(ex = _root_.scala.Some(e)))
        }
        case e => Future.exception(e)
      }
    } catch {
      case e: TProtocolException => {
        iprot.readMessageEnd()
        exception("findEmployeeByJob", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage)
      }
      case e: Exception => Future.exception(e)
    }
  })
  addFunction("addEmployee", { (iprot: TProtocol, seqid: Int) =>
    try {
      val args = addEmployee$args.decode(iprot)
      iprot.readMessageEnd()
      (try {
        iface.addEmployee(args.name, args.job)
      } catch {
        case e: Exception => Future.exception(e)
      }) flatMap { value: Unit =>
        reply("addEmployee", seqid, addEmployee$result())
      } rescue {
        case e => Future.exception(e)
      }
    } catch {
      case e: TProtocolException => {
        iprot.readMessageEnd()
        exception("addEmployee", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage)
      }
      case e: Exception => Future.exception(e)
    }
  })
}