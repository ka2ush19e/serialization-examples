/**
 * Generated by Scrooge
 *   version: 3.19.0
 *   rev: a470ba0b90af37c6dfc4b19c5258652a8e7f706e
 *   built at: 20150625-095056
 */
package jp.gr.java_conf.ka2ush19e.serializations.thrift.company

import com.twitter.scrooge.ThriftEnum


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object Job {
  
  case object Sales extends jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job {
    val value = 1
    val name = "Sales"
    val originalName = "SALES"
  }

  private[this] val _SomeSales = _root_.scala.Some(jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job.Sales)
  
  case object Engineer extends jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job {
    val value = 2
    val name = "Engineer"
    val originalName = "ENGINEER"
  }

  private[this] val _SomeEngineer = _root_.scala.Some(jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job.Engineer)
  
  case object Analyst extends jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job {
    val value = 3
    val name = "Analyst"
    val originalName = "ANALYST"
  }

  private[this] val _SomeAnalyst = _root_.scala.Some(jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job.Analyst)

  case class EnumUnknownJob(value: Int) extends jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job {
    val name = "EnumUnknownJob" + value
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * @throws NoSuchElementException if the value is not found.
   */
  def apply(value: Int): jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job =
    value match {
      case 1 => jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job.Sales
      case 2 => jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job.Engineer
      case 3 => jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job.Analyst
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownJob(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownJob(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job] =
    value match {
      case 1 => _SomeSales
      case 2 => _SomeEngineer
      case 3 => _SomeAnalyst
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job] =
    name.toLowerCase match {
      case "sales" => _SomeSales
      case "engineer" => _SomeEngineer
      case "analyst" => _SomeAnalyst
      case _ => _root_.scala.None
    }

  lazy val list: List[jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job] = scala.List[jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job](
    jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job.Sales,
    jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job.Engineer,
    jp.gr.java_conf.ka2ush19e.serializations.thrift.company.Job.Analyst
  )
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait Job extends ThriftEnum with Serializable