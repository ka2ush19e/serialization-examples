/**
 * Generated by Scrooge
 *   version: 3.19.0
 *   rev: a470ba0b90af37c6dfc4b19c5258652a8e7f706e
 *   built at: 20150625-095056
 */
package jp.gr.java_conf.ka2ush19e.serializers.thrift.company

import com.twitter.finagle.{SourcedException, Service => FinagleService}
import com.twitter.finagle.stats.{NullStatsReceiver, StatsReceiver}
import com.twitter.finagle.thrift.{Protocols, ThriftClientRequest}
import com.twitter.scrooge.{ThriftStruct, ThriftStructCodec}
import com.twitter.util.{Future, Return, Throw, Throwables}
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.{TMemoryBuffer, TMemoryInputTransport}
import scala.collection.{Map, Set}

import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
class CompanyService$FinagleClient(
  val service: FinagleService[ThriftClientRequest, Array[Byte]],
  val protocolFactory: TProtocolFactory = Protocols.binaryFactory(),
  val serviceName: String = "CompanyService",
  stats: StatsReceiver = NullStatsReceiver
) extends CompanyService[Future] {
  import CompanyService._

  protected def encodeRequest(name: String, args: ThriftStruct) = {
    val buf = new TMemoryBuffer(512)
    val oprot = protocolFactory.getProtocol(buf)

    oprot.writeMessageBegin(new TMessage(name, TMessageType.CALL, 0))
    args.write(oprot)
    oprot.writeMessageEnd()

    val bytes = Arrays.copyOfRange(buf.getArray, 0, buf.length)
    new ThriftClientRequest(bytes, false)
  }

  protected def decodeResponse[T <: ThriftStruct](resBytes: Array[Byte], codec: ThriftStructCodec[T]) = {
    val iprot = protocolFactory.getProtocol(new TMemoryInputTransport(resBytes))
    val msg = iprot.readMessageBegin()
    try {
      if (msg.`type` == TMessageType.EXCEPTION) {
        val exception = TApplicationException.read(iprot) match {
          case sourced: SourcedException =>
            if (serviceName != "") sourced.serviceName = serviceName
            sourced
          case e => e
        }
        throw exception
      } else {
        codec.decode(iprot)
      }
    } finally {
      iprot.readMessageEnd()
    }
  }

  protected def missingResult(name: String) = {
    new TApplicationException(
      TApplicationException.MISSING_RESULT,
      name + " failed: unknown result"
    )
  }

  protected def setServiceName(ex: Throwable): Throwable =
    if (this.serviceName == "") ex
    else {
      ex match {
        case se: SourcedException =>
          se.serviceName = this.serviceName
          se
        case _ => ex
      }
    }

  // ----- end boilerplate.

  private[this] val scopedStats = if (serviceName != "") stats.scope(serviceName) else stats
  private[this] object __stats_get {
    val RequestsCounter = scopedStats.scope("get").counter("requests")
    val SuccessCounter = scopedStats.scope("get").counter("success")
    val FailuresCounter = scopedStats.scope("get").counter("failures")
    val FailuresScope = scopedStats.scope("get").scope("failures")
  }
  
  def get(): Future[Company] = {
    __stats_get.RequestsCounter.incr()
    this.service(encodeRequest("get", get$args())) flatMap { response =>
      val result = decodeResponse(response, get$result)
      val exception: Future[Nothing] =
        null
  
      if (result.success.isDefined)
        Future.value(result.success.get)
      else if (exception != null)
        exception
      else
        Future.exception(missingResult("get"))
    } respond {
      case Return(_) =>
        __stats_get.SuccessCounter.incr()
      case Throw(ex) =>
        setServiceName(ex)
        __stats_get.FailuresCounter.incr()
        __stats_get.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
    }
  }
  private[this] object __stats_getEmployees {
    val RequestsCounter = scopedStats.scope("getEmployees").counter("requests")
    val SuccessCounter = scopedStats.scope("getEmployees").counter("success")
    val FailuresCounter = scopedStats.scope("getEmployees").counter("failures")
    val FailuresScope = scopedStats.scope("getEmployees").scope("failures")
  }
  
  def getEmployees(): Future[Seq[Employee]] = {
    __stats_getEmployees.RequestsCounter.incr()
    this.service(encodeRequest("getEmployees", getEmployees$args())) flatMap { response =>
      val result = decodeResponse(response, getEmployees$result)
      val exception: Future[Nothing] =
        null
  
      if (result.success.isDefined)
        Future.value(result.success.get)
      else if (exception != null)
        exception
      else
        Future.exception(missingResult("getEmployees"))
    } respond {
      case Return(_) =>
        __stats_getEmployees.SuccessCounter.incr()
      case Throw(ex) =>
        setServiceName(ex)
        __stats_getEmployees.FailuresCounter.incr()
        __stats_getEmployees.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
    }
  }
  private[this] object __stats_findEmployeeByName {
    val RequestsCounter = scopedStats.scope("findEmployeeByName").counter("requests")
    val SuccessCounter = scopedStats.scope("findEmployeeByName").counter("success")
    val FailuresCounter = scopedStats.scope("findEmployeeByName").counter("failures")
    val FailuresScope = scopedStats.scope("findEmployeeByName").scope("failures")
  }
  
  def findEmployeeByName(name: String): Future[Employee] = {
    __stats_findEmployeeByName.RequestsCounter.incr()
    this.service(encodeRequest("findEmployeeByName", findEmployeeByName$args(name))) flatMap { response =>
      val result = decodeResponse(response, findEmployeeByName$result)
      val exception: Future[Nothing] =
        if (false)
          null // can never happen, but needed to open a block
        else if (result.ex.isDefined)
          Future.exception(setServiceName(result.ex.get))
        else
          null
  
      if (result.success.isDefined)
        Future.value(result.success.get)
      else if (exception != null)
        exception
      else
        Future.exception(missingResult("findEmployeeByName"))
    } respond {
      case Return(_) =>
        __stats_findEmployeeByName.SuccessCounter.incr()
      case Throw(ex) =>
        setServiceName(ex)
        __stats_findEmployeeByName.FailuresCounter.incr()
        __stats_findEmployeeByName.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
    }
  }
  private[this] object __stats_findEmployeeByJob {
    val RequestsCounter = scopedStats.scope("findEmployeeByJob").counter("requests")
    val SuccessCounter = scopedStats.scope("findEmployeeByJob").counter("success")
    val FailuresCounter = scopedStats.scope("findEmployeeByJob").counter("failures")
    val FailuresScope = scopedStats.scope("findEmployeeByJob").scope("failures")
  }
  
  def findEmployeeByJob(job: Job): Future[Employee] = {
    __stats_findEmployeeByJob.RequestsCounter.incr()
    this.service(encodeRequest("findEmployeeByJob", findEmployeeByJob$args(job))) flatMap { response =>
      val result = decodeResponse(response, findEmployeeByJob$result)
      val exception: Future[Nothing] =
        if (false)
          null // can never happen, but needed to open a block
        else if (result.ex.isDefined)
          Future.exception(setServiceName(result.ex.get))
        else
          null
  
      if (result.success.isDefined)
        Future.value(result.success.get)
      else if (exception != null)
        exception
      else
        Future.exception(missingResult("findEmployeeByJob"))
    } respond {
      case Return(_) =>
        __stats_findEmployeeByJob.SuccessCounter.incr()
      case Throw(ex) =>
        setServiceName(ex)
        __stats_findEmployeeByJob.FailuresCounter.incr()
        __stats_findEmployeeByJob.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
    }
  }
  private[this] object __stats_addEmployee {
    val RequestsCounter = scopedStats.scope("addEmployee").counter("requests")
    val SuccessCounter = scopedStats.scope("addEmployee").counter("success")
    val FailuresCounter = scopedStats.scope("addEmployee").counter("failures")
    val FailuresScope = scopedStats.scope("addEmployee").scope("failures")
  }
  
  def addEmployee(name: String, job: Job): Future[Unit] = {
    __stats_addEmployee.RequestsCounter.incr()
    this.service(encodeRequest("addEmployee", addEmployee$args(name, job))) flatMap { response =>
      val result = decodeResponse(response, addEmployee$result)
      val exception: Future[Nothing] =
        null
  
      if (exception != null) exception else Future.Done
    } respond {
      case Return(_) =>
        __stats_addEmployee.SuccessCounter.incr()
      case Throw(ex) =>
        setServiceName(ex)
        __stats_addEmployee.FailuresCounter.incr()
        __stats_addEmployee.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
    }
  }
}